/*
 * Copyright 2015 Nils Ryter.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.arkeine.markupextractor.userinterface;

import ch.arkeine.markupextractor.userinterface.wizard.MarkupFinder;
import ch.arkeine.markupextractor.extractor.Command;
import ch.arkeine.markupextractor.extractor.Extractor;
import ch.arkeine.markupextractor.tool.ToolFiles;
import ch.arkeine.markupextractor.tool.ToolMessages;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Nils Ryter
 */
public class ScriptEditorMenu extends javax.swing.JDialog {

    private boolean isOk;

    /**
     * Creates new form CommandEditor
     */
    public ScriptEditorMenu(java.awt.Frame parent, boolean modal) {
        this(parent, modal, new Command[0]);
    }

    public ScriptEditorMenu(java.awt.Frame parent, boolean modal, Command[] cmds) {
        super(parent, modal);
        initComponents();
        isOk = false;
        commandEditorTable.setCommandScript(cmds);
    }

    public boolean isOk() {
        return isOk;
    }

    public Command[] getCommands() {
        return commandEditorTable.getCommandScript();
    }

    public void setCommands(Command[] cmds) {
        commandEditorTable.setCommandScript(cmds);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        panelFiles = new javax.swing.JPanel();
        btSaveCommand = new javax.swing.JButton();
        btLoadCommand = new javax.swing.JButton();
        panelOther = new javax.swing.JPanel();
        btTestScript = new javax.swing.JButton();
        panelGenerate = new javax.swing.JPanel();
        btMarkupFinder = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        buttonOk = new javax.swing.JButton();
        commandEditorTable = new ch.arkeine.markupextractor.userinterface.scripteditor.CommandEditorTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ch/arkeine/markupextractor/internationalization"); // NOI18N
        setTitle(bundle.getString("ScriptEditorMenu.title")); // NOI18N

        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setResizeWeight(1.0);

        panelFiles.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ScriptEditorMenu.panelFiles.border.title"))); // NOI18N

        btSaveCommand.setText(bundle.getString("ScriptEditorMenu.btSaveCommand.text")); // NOI18N
        btSaveCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveCommandActionPerformed(evt);
            }
        });

        btLoadCommand.setText(bundle.getString("ScriptEditorMenu.btLoadCommand.text")); // NOI18N
        btLoadCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoadCommandActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFilesLayout = new javax.swing.GroupLayout(panelFiles);
        panelFiles.setLayout(panelFilesLayout);
        panelFilesLayout.setHorizontalGroup(
            panelFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btSaveCommand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btLoadCommand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelFilesLayout.setVerticalGroup(
            panelFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btSaveCommand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btLoadCommand)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelOther.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ScriptEditorMenu.panelOther.border.title"))); // NOI18N

        btTestScript.setText(bundle.getString("ScriptEditorMenu.btTestScript.text")); // NOI18N
        btTestScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTestScriptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelOtherLayout = new javax.swing.GroupLayout(panelOther);
        panelOther.setLayout(panelOtherLayout);
        panelOtherLayout.setHorizontalGroup(
            panelOtherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOtherLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btTestScript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelOtherLayout.setVerticalGroup(
            panelOtherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOtherLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btTestScript)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelGenerate.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ScriptEditorMenu.panelGenerate.border.title"))); // NOI18N

        btMarkupFinder.setText(bundle.getString("ScriptEditorMenu.btMarkupFinder.text")); // NOI18N
        btMarkupFinder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMarkupFinderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelGenerateLayout = new javax.swing.GroupLayout(panelGenerate);
        panelGenerate.setLayout(panelGenerateLayout);
        panelGenerateLayout.setHorizontalGroup(
            panelGenerateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGenerateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btMarkupFinder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelGenerateLayout.setVerticalGroup(
            panelGenerateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGenerateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btMarkupFinder)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonCancel.setText(bundle.getString("ScriptEditorMenu.buttonCancel.text")); // NOI18N
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonOk.setText(bundle.getString("ScriptEditorMenu.buttonOk.text")); // NOI18N
        buttonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelOther, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonOk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addComponent(buttonOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCancel)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel1);
        jSplitPane1.setLeftComponent(commandEditorTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSaveCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveCommandActionPerformed
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle(
                "ch/arkeine/markupextractor/internationalization"); // NOI18N
        String extension = bundle.getString(".constant.commandFile.extension");
        String description = bundle.getString(
                ".constant.commandFile.description");
        String summary = bundle.getString(".message.errorSummary");
        String title = bundle.getString(".message.errorTitle");

        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(ToolFiles.getFilter(extension, description));
        fc.showSaveDialog(this);

        if (fc.getSelectedFile() != null) {

            try {
                List<Command> l = Arrays.asList(
                        commandEditorTable.getCommandScript());
                ToolFiles.writeObjectToFile(l,
                        fc.getSelectedFile().getAbsolutePath(), extension);
            } catch (IOException ex) {
                ToolMessages.showException(this, summary, title, ex);
                Logger.getLogger(ScriptEditorMenu.class.getName()).log(
                        Level.WARNING, null, ex);
            }
        }
    }//GEN-LAST:event_btSaveCommandActionPerformed

    private void btLoadCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoadCommandActionPerformed
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle(
                "ch/arkeine/markupextractor/internationalization"); // NOI18N
        String extension = bundle.getString(".constant.commandFile.extension");
        String description = bundle.getString(
                ".constant.commandFile.description");
        String summary = bundle.getString(".message.errorSummary");
        String title = bundle.getString(".message.errorTitle");

        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(ToolFiles.getFilter(extension, description));
        fc.showOpenDialog(this);

        if (fc.getSelectedFile() != null) {

            try {
                List<Command> l = (List<Command>) ToolFiles.readObjectFromFile(
                        fc.getSelectedFile().getAbsolutePath());
                Command[] c = l.toArray(new Command[l.size()]);
                setCommands(c);
            } catch (IOException | ClassNotFoundException ex) {
                ToolMessages.showException(this, summary, title, ex);
                Logger.getLogger(ScriptEditorMenu.class.getName()).log(
                        Level.WARNING, null, ex);
            }
        }
    }//GEN-LAST:event_btLoadCommandActionPerformed

    private void btMarkupFinderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMarkupFinderActionPerformed
        MarkupFinder m = new MarkupFinder(null, true);
        m.setVisible(true);

        if (m.isOk()) {
            String[] markups = m.getMarkups();
            assert markups.length == 2 : "error in markups array";

            Command[] cmd = new Command[1];
            cmd[0] = new Command(Command.CommandName.COPY);
            cmd[0].setParameter1(markups[0]);
            cmd[0].setParameter2(markups[1]);

            commandEditorTable.insertCommandScript(cmd);
        }
    }//GEN-LAST:event_btMarkupFinderActionPerformed

    private void btTestScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTestScriptActionPerformed
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle(
                "ch/arkeine/markupextractor/internationalization"); // NOI18N
        String url = JOptionPane.showInputDialog(this,
                bundle.getString("ScriptEditorMenu.input.url"));

        ExtractionMenu dialog1 = new ExtractionMenu(null, true,
                new Extractor(getCommands(), new String[]{url}, true));
        dialog1.setLocationRelativeTo(this);
        dialog1.setVisible(true);

        DisplayDataExtracted dialog2 = new DisplayDataExtracted(null, true);
        dialog2.SetDataSource(dialog1.getExtractor());
        dialog2.setLocationRelativeTo(this);
        dialog2.setVisible(true);
    }//GEN-LAST:event_btTestScriptActionPerformed

    private void buttonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkActionPerformed
        isOk = true;
        dispose();
    }//GEN-LAST:event_buttonOkActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btLoadCommand;
    private javax.swing.JButton btMarkupFinder;
    private javax.swing.JButton btSaveCommand;
    private javax.swing.JButton btTestScript;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonOk;
    private ch.arkeine.markupextractor.userinterface.scripteditor.CommandEditorTable commandEditorTable;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel panelFiles;
    private javax.swing.JPanel panelGenerate;
    private javax.swing.JPanel panelOther;
    // End of variables declaration//GEN-END:variables
}
