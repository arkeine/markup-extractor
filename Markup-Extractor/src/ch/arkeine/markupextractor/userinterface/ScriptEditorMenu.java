/*
 * Copyright 2015 Nils Ryter.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.arkeine.markupextractor.userinterface;

import ch.arkeine.markupextractor.userinterface.wizard.MarkupFinder;
import ch.arkeine.markupextractor.extractor.Command;
import ch.arkeine.markupextractor.extractor.Extractor;
import ch.arkeine.markupextractor.tool.FileTool;
import ch.arkeine.markupextractor.tool.UrlTool;
import ch.arkeine.markupextractor.userinterface.scripteditor.ScriptEditor;
import java.awt.Component;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Nils Ryter
 */
public class ScriptEditorMenu extends javax.swing.JDialog {
    
    public static String commandsToString(Command[] cmds) {
        StringBuilder s = new StringBuilder();

        for (Command c : cmds) {
            s.append(c.getName().toString());
            s.append("\n");
            s.append(c.getParameter1());
            s.append("\n");
            s.append(c.getParameter2());
            s.append("\n");
        }

        return s.toString();
    }

    public static Command[] stringToCommands(String s) {
        String[] strCmds = s.split("\n");

        if ((strCmds.length - 1) % 3 == 0) {
            Command[] cmds = new Command[strCmds.length - 1];

            for (int i = 0; i < cmds.length; i++) {
                cmds[i] = new Command(Command.CommandName.valueOf(strCmds[i]));
                cmds[i].setParameter1(strCmds[i + 1]);
                cmds[i].setParameter2(strCmds[i + 2]);
            }

            return cmds;
        } else {
            return new Command[0];
        }
    }

    private boolean isOk;
    private Command[] cmds;

    /**
     * Creates new form CommandEditor
     */
    public ScriptEditorMenu(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        isOk = false;
        cmds = new Command[0];
    }

    public boolean isOk() {
        return isOk;
    }
    
    public Command[] getCommands() {
        return cmds;
    }

    private void setCommandSript(Command[] cmds) {
        this.cmds = cmds;

        for (Component comp : jTabbedPane1.getComponents()) {
            ScriptEditor se = (ScriptEditor) comp;
            se.setCommandScript(cmds);
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        panFiles = new javax.swing.JPanel();
        btSaveCommand = new javax.swing.JButton();
        btLoadCommand = new javax.swing.JButton();
        panOther = new javax.swing.JPanel();
        btTestScript = new javax.swing.JButton();
        panGenerate = new javax.swing.JPanel();
        btMarkupFinder = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        btOk = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        commandEditorConsole1 = new ch.arkeine.markupextractor.userinterface.scripteditor.CommandEditorConsole();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ch/arkeine/markupextractor/internationalization"); // NOI18N
        setTitle(bundle.getString("ScriptEditorMenu.title")); // NOI18N

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setResizeWeight(1.0);

        panFiles.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ScriptEditorMenu.panFiles.border.title"))); // NOI18N

        btSaveCommand.setText(bundle.getString("ScriptEditorMenu.btSaveCommand.text")); // NOI18N
        btSaveCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveCommandActionPerformed(evt);
            }
        });

        btLoadCommand.setText(bundle.getString("ScriptEditorMenu.btLoadCommand.text")); // NOI18N
        btLoadCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoadCommandActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panFilesLayout = new javax.swing.GroupLayout(panFiles);
        panFiles.setLayout(panFilesLayout);
        panFilesLayout.setHorizontalGroup(
            panFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btSaveCommand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btLoadCommand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panFilesLayout.setVerticalGroup(
            panFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btSaveCommand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btLoadCommand)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panOther.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ScriptEditorMenu.panOther.border.title"))); // NOI18N

        btTestScript.setText(bundle.getString("ScriptEditorMenu.btTestScript.text")); // NOI18N
        btTestScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTestScriptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panOtherLayout = new javax.swing.GroupLayout(panOther);
        panOther.setLayout(panOtherLayout);
        panOtherLayout.setHorizontalGroup(
            panOtherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panOtherLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btTestScript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panOtherLayout.setVerticalGroup(
            panOtherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panOtherLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btTestScript)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panGenerate.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ScriptEditorMenu.panGenerate.border.title"))); // NOI18N

        btMarkupFinder.setText(bundle.getString("ScriptEditorMenu.btMarkupFinder.text")); // NOI18N
        btMarkupFinder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMarkupFinderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panGenerateLayout = new javax.swing.GroupLayout(panGenerate);
        panGenerate.setLayout(panGenerateLayout);
        panGenerateLayout.setHorizontalGroup(
            panGenerateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panGenerateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btMarkupFinder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panGenerateLayout.setVerticalGroup(
            panGenerateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panGenerateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btMarkupFinder)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btCancel.setText(bundle.getString("ScriptEditorMenu.btCancel.text")); // NOI18N
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        btOk.setText(bundle.getString("ScriptEditorMenu.btOk.text")); // NOI18N
        btOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panOther, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btOk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addComponent(btOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btCancel)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel1);

        jTabbedPane1.addTab(bundle.getString("ScriptEditorMenu.commandEditorConsole1.TabConstraints.tabTitle"), commandEditorConsole1); // NOI18N

        jSplitPane1.setLeftComponent(jTabbedPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSaveCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveCommandActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(FileTool.getCommandScriptFilter());
        fc.showSaveDialog(this);

        if (fc.getSelectedFile() != null) {

            try{
                FileTool.writeStringToFile(commandsToString(cmds), 
                        fc.getSelectedFile().getAbsolutePath(),
                        FileTool.COMMAND_FILE_EXTENSION);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex);
                Logger.getLogger(ScriptEditorMenu.class.getName()).log(
                        Level.WARNING,
                        null, ex);
            }
        }
    }//GEN-LAST:event_btSaveCommandActionPerformed

    private void btLoadCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoadCommandActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(FileTool.getCommandScriptFilter());
        fc.showOpenDialog(this);

        if (fc.getSelectedFile() != null) {

            try {
                setCommandSript(stringToCommands(
                        FileTool.readStringFromFile(
                                fc.getSelectedFile().getAbsolutePath())));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex);
                Logger.getLogger(ScriptEditorMenu.class.getName()).log(
                        Level.WARNING,
                        null, ex);
            }
        }
    }//GEN-LAST:event_btLoadCommandActionPerformed

    private void btMarkupFinderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMarkupFinderActionPerformed
        MarkupFinder m = new MarkupFinder(null, true);
        m.setVisible(true);

        if (m.isOk()) {
            String[] markups = m.getMarkups();
            assert markups.length == 2 : "error in markups array";

            Command[] cmd = new Command[1];
            cmd[0] = new Command(Command.CommandName.COPY);
            cmd[0].setParameter1(markups[0]);
            cmd[0].setParameter2(markups[1]);

            setCommandSript(cmd);
        }
    }//GEN-LAST:event_btMarkupFinderActionPerformed

    private void btTestScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTestScriptActionPerformed
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle(
                "ch/arkeine/markupextractor/internationalization"); // NOI18N

        String[] url = new String[1];
        try {
            url[0] = UrlTool.loadURL(JOptionPane.showInputDialog(this,
                    bundle.getString(
                            "CommandEditor.input.url")), "").toString();

            String separator = JOptionPane.showInputDialog(this,
                    bundle.getString(
                            "CommandEditor.input.separator"));

            Extractor extractor = new Extractor(cmds, url);
            extractor.run();

            JOptionPane.showMessageDialog(this, extractor.getExtractedToCSV(
                    separator));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, bundle.getString(
                    "CommandEditor.message.invalidUrl"));
            Logger.getLogger(ScriptEditorMenu.class.getName()).log(Level.WARNING,
                    null, ex);
        }
    }//GEN-LAST:event_btTestScriptActionPerformed

    private void btOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOkActionPerformed
        isOk = true;
        dispose();
    }//GEN-LAST:event_btOkActionPerformed

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btLoadCommand;
    private javax.swing.JButton btMarkupFinder;
    private javax.swing.JButton btOk;
    private javax.swing.JButton btSaveCommand;
    private javax.swing.JButton btTestScript;
    private ch.arkeine.markupextractor.userinterface.scripteditor.CommandEditorConsole commandEditorConsole1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel panFiles;
    private javax.swing.JPanel panGenerate;
    private javax.swing.JPanel panOther;
    // End of variables declaration//GEN-END:variables
}
