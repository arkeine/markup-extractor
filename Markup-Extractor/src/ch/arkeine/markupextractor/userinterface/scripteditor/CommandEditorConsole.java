/*
 * Copyright 2015 Nils Ryter.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.arkeine.markupextractor.userinterface.scripteditor;

import ch.arkeine.markupextractor.extractor.Command;

/**
 *
 * @author Nils Ryter
 */
public class CommandEditorConsole extends ScriptEditor {

    private String separator;
    
    /**
     * Creates new form CommandEditorConsole
     */
    public CommandEditorConsole() {
        initComponents();
        separator = "\t";
    }
    
    @Override
    public Command[] getCommandScript() {
        if (isCommandScriptValid()) {
            String[] tmp = txtCommand.getText().split("\n");
            Command[] tabCmd = new Command[tmp.length];

            int i = 0;
            for (String line : tmp) {
                String[] cmd = line.split(separator);
                tabCmd[i] = new Command(Command.CommandName.valueOf(cmd[0]));
                tabCmd[i].setParameter1(cmd[1]);
                tabCmd[i].setParameter2(cmd[2]);
            }
            return tabCmd;
        }
        return new Command[0];
    }

    @Override
    public void setCommandScript(Command[] cmds) {
        StringBuilder s = new StringBuilder();

        for (Command c : cmds) {
            s.append(c.getName().toString());
            s.append(separator);
            s.append(c.getParameter1());
            s.append(separator);
            s.append(c.getParameter2());
            s.append("\n");
        }

        txtCommand.setText(s.toString());
    }

    public String getSeparator() {
        return separator;
    }

    public void setSeparator(String separator) {
        assert separator != null : "separator can't be null";
        
        this.separator = separator;
    }

    @Override
    public boolean isCommandScriptValid() {
        String[] tmp = txtCommand.getText().split("\n");

        for (String line : tmp) {
            String[] cmd = line.split(separator);

            if (cmd.length != 3) {
                int i = txtCommand.getText().indexOf(line);
                txtCommand.setSelectionStart(i);
                txtCommand.setSelectionEnd(i + line.length());
                return false;
            }

            try {
                Command.CommandName.valueOf(cmd[0]);
            } catch (IllegalArgumentException e) {
                int i = txtCommand.getText().indexOf(line);
                txtCommand.setSelectionStart(i);
                txtCommand.setSelectionEnd(i + line.length());
                return false;
            }
        }

        return true;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menOptions = new javax.swing.JPopupMenu();
        optSetSeparator = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCommand = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();

        optSetSeparator.setText("Set separator");
        menOptions.add(optSetSeparator);

        txtCommand.setColumns(20);
        txtCommand.setRows(5);
        txtCommand.setPopupMenu(menOptions);
        jScrollPane1.setViewportView(txtCommand);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu menOptions;
    private javax.swing.JMenuItem optSetSeparator;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea txtCommand;
    // End of variables declaration//GEN-END:variables
}
