/*
 * Copyright 2015 Nils Ryter.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.arkeine.markupextractor.userinterface.scripteditor;

import ch.arkeine.markupextractor.extractor.Command;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Nils Ryter
 */
public class CommandEditorTable extends javax.swing.JPanel {

    /**
     * Creates new form Com
     */
    public CommandEditorTable() {
        initComponents();
        initailizeColumnModel();
    }

    public Command[] getCommandScript() {
        return ((CommandTableModel) tableCommands.getModel()).getCommands();
    }

    public void setCommandScript(Command[] c) {
        ((CommandTableModel) tableCommands.getModel()).setCommands(c);
    }

    public void insertCommandScript(Command[] c) {
        for (Command command : c) {
            ((CommandTableModel) tableCommands.getModel()).addCommand(command);
        }
    }

    private void initailizeColumnModel() {

        JComboBox cbCommand = new JComboBox(Command.CommandName.values());

        TableColumn colCmd = tableCommands.getColumnModel().getColumn(0);
        TableColumn colParam1 = tableCommands.getColumnModel().getColumn(1);
        TableColumn colParam2 = tableCommands.getColumnModel().getColumn(2);

        colCmd.setCellEditor(new DefaultCellEditor(cbCommand));
        colParam1.setCellEditor(new BigTextEditor());
        colParam2.setCellEditor(new BigTextEditor());

    }

    private AbstractTableModel createModel() {
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle(
                "ch/arkeine/markupextractor/internationalization"); // NOI18N

        String[] s = new String[3];
        s[0] = bundle.getString("CommandEditorTable.tabCommands.titleColumn1"); // NOI18N
        s[1] = bundle.getString("CommandEditorTable.tabCommands.titleColumn2"); // NOI18N
        s[2] = bundle.getString("CommandEditorTable.tabCommands.titleColumn3"); // NOI18N

        return new CommandTableModel(s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonRemoveCommand = new javax.swing.JButton();
        buttonNewCommand = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCommands = new javax.swing.JTable();
        buttonUp = new javax.swing.JButton();
        buttonDown = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ch/arkeine/markupextractor/internationalization"); // NOI18N
        buttonRemoveCommand.setText(bundle.getString("CommandEditorTable.buttonRemoveCommand.text")); // NOI18N
        buttonRemoveCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveCommandActionPerformed(evt);
            }
        });

        buttonNewCommand.setText(bundle.getString("CommandEditorTable.buttonNewCommand.text")); // NOI18N
        buttonNewCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewCommandActionPerformed(evt);
            }
        });

        tableCommands.setModel(createModel());
        tableCommands.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tableCommands.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tableCommands);

        buttonUp.setText(bundle.getString("CommandEditorTable.buttonUp.text")); // NOI18N
        buttonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpActionPerformed(evt);
            }
        });

        buttonDown.setText(bundle.getString("CommandEditorTable.buttonDown.text")); // NOI18N
        buttonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonNewCommand)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonRemoveCommand))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonNewCommand)
                    .addComponent(buttonRemoveCommand)
                    .addComponent(buttonUp)
                    .addComponent(buttonDown))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonNewCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewCommandActionPerformed
        Command c = new Command(Command.CommandName.CUT);
        ((CommandTableModel) tableCommands.getModel()).addCommand(c);
    }//GEN-LAST:event_buttonNewCommandActionPerformed

    private void buttonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpActionPerformed
        CommandTableModel model = (CommandTableModel) tableCommands.getModel();
        int[] rows = tableCommands.getSelectedRows();
        if (rows.length > 0) {
            model.moveRow(rows[0], rows[rows.length - 1], rows[0] - 1);
            tableCommands.setRowSelectionInterval(rows[0] - 1,
                    rows[rows.length - 1] - 1);
        }
    }//GEN-LAST:event_buttonUpActionPerformed

    private void buttonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDownActionPerformed
        CommandTableModel model = (CommandTableModel) tableCommands.getModel();
        int[] rows = tableCommands.getSelectedRows();
        if (rows.length > 0) {
            model.moveRow(rows[0], rows[rows.length - 1], rows[0] + 1);
            tableCommands.setRowSelectionInterval(rows[0] + 1,
                    rows[rows.length - 1] + 1);
        }
    }//GEN-LAST:event_buttonDownActionPerformed

    private void buttonRemoveCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveCommandActionPerformed
        ((CommandTableModel) tableCommands.getModel()).removeCommand(
                tableCommands.getSelectedRow());
    }//GEN-LAST:event_buttonRemoveCommandActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDown;
    private javax.swing.JButton buttonNewCommand;
    private javax.swing.JButton buttonRemoveCommand;
    private javax.swing.JButton buttonUp;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableCommands;
    // End of variables declaration//GEN-END:variables
}
